{"version":3,"sources":["BarcodeScannerComponent.tsx","index.tsx"],"names":["BarcodeScannerComponent","_StreamlitComponentBa","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","lastDecoded","html5QrcodeScanner","render","React","createElement","id","style","minHeight","_createClass","key","value","_get","_getPrototypeOf","prototype","this","Html5QrcodeScanner","_objectSpread","props","videoConstraints","height","formatsToSupport","Object","values","Html5QrcodeSupportedFormats","success","bind","error","Streamlit","setFrameHeight","_this$html5QrcodeScan","clear","catch","console","decodedText","result","setComponentValue","errorMessage","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","BarCodeScannerComponent","document","getElementById"],"mappings":"sSAYMA,EAAuB,SAAAC,GAAAC,YAAAF,EAAAC,GAAA,IAAAE,EAAAC,YAAAJ,GAAA,SAAAA,IAAA,IAAAK,EAAAC,YAAA,KAAAN,GAAA,QAAAO,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAsC1B,OAtC0BP,EAAAF,EAAAU,KAAAC,MAAAX,EAAA,OAAAY,OAAAL,KAEnBM,YAA6B,KAAIX,EAEjCY,mBAAgD,KAAIZ,EAyBrDa,OAAS,WACd,OACEC,IAAAC,cAAA,OACAC,GAlCiB,2BAmCjBC,MAAO,CACLC,UAAU,YAIflB,EAWA,OAXAmB,YAAAxB,EAAA,EAAAyB,IAAA,oBAAAC,MAhCD,WACEC,YAAAC,YAAA5B,EAAA6B,WAAA,0BAAAhB,KAAA,MACAiB,KAAKb,mBAAqB,IAAIc,IAVX,2BAWHC,wBAAA,GAETF,KAAKG,MAAMvB,MACX,CACDwB,iBAAiB,CAACC,OAAOL,KAAKG,MAAMvB,KAAKyB,QACzCC,iBAAiBC,OAAOC,OAAOC,QAGnC,GAEFT,KAAKb,mBAAmBC,OAAOY,KAAKU,QAAQC,KAAKX,MAAOA,KAAKY,MAAMD,KAAKX,OACxEa,IAAUC,mBACX,CAAAnB,IAAA,uBAAAC,MAED,WAA8B,IAADmB,EACJ,QAAvBA,EAAAf,KAAKb,0BAAkB,IAAA4B,GAAvBA,EAAyBC,QAAQC,OAAM,SAAAL,GACrCM,QAAQN,MAAM,uCAAwCA,QAEzD,CAAAjB,IAAA,UAAAC,MAaD,SAAgBuB,EAAoBC,GAC9BD,IAAgBnB,KAAKd,cACvB2B,IAAUQ,kBAAkBF,GAC5BnB,KAAKd,YAAciC,KAEtB,CAAAxB,IAAA,QAAAC,MAED,SAAc0B,EAAsBV,QAEnC1C,EAjD0B,CAASqD,KAqDvBC,cAAwBtD,GC7DvCuD,IAASrC,OACPC,IAAAC,cAACD,IAAMqC,WAAU,KACfrC,IAAAC,cAACqC,EAAuB,OAE1BC,SAASC,eAAe,W","file":"static/js/main.2a4d6cad.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ComponentProps, ReactNode, RefObject} from \"react\"\n\nimport { Html5QrcodeScanner, } from 'html5-qrcode';\nimport { Html5QrcodeError, Html5QrcodeResult, Html5QrcodeSupportedFormats } from \"html5-qrcode/esm/core\";\n\nconst qrcodeRegionId = \"html5qr-code-full-region\";\n\nclass BarcodeScannerComponent extends StreamlitComponentBase {\n\n  private lastDecoded: string | null = null;\n\n  private html5QrcodeScanner: Html5QrcodeScanner | null = null;;\n\n  componentDidMount() {\n    super.componentDidMount();\n    this.html5QrcodeScanner = new Html5QrcodeScanner(\n      qrcodeRegionId, \n      {\n        ...this.props.args,\n        ...{\n          videoConstraints:{height:this.props.args.height},\n          formatsToSupport:Object.values(Html5QrcodeSupportedFormats) as any\n        }\n      }, \n      false\n    );\n    this.html5QrcodeScanner.render(this.success.bind(this), this.error.bind(this));\n    Streamlit.setFrameHeight()\n  }\n\n  componentWillUnmount(): void {\n    this.html5QrcodeScanner?.clear().catch(error => {\n      console.error(\"Failed to clear html5QrcodeScanner. \", error);\n  });\n  }\n\n  public render = (): ReactNode => {\n    return (\n      <div\n      id={qrcodeRegionId}\n      style={{\n        minHeight:'600px'\n      }}\n      />\n    )\n  }\n\n  private success(decodedText: string,result:Html5QrcodeResult ) {\n    if (decodedText !== this.lastDecoded) {\n      Streamlit.setComponentValue(decodedText)\n      this.lastDecoded = decodedText\n    }\n  }\n\n  private error(errorMessage: string, error: Html5QrcodeError) {\n    //\n  }\n\n}\n\nexport default withStreamlitConnection(BarcodeScannerComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport BarCodeScannerComponent from \"./BarcodeScannerComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <BarCodeScannerComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}